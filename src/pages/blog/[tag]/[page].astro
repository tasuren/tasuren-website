---
import { Page } from "astro";

import Layout from "@layouts/Main.astro";

import { API_KEY, Article, getAllArticles } from "@libraries/cms";


interface ExtendedArticle extends Article { ctx: any };


export const PAGE_SIZE = import.meta.env.PAGE_SIZE || 5;
export async function getStaticPaths({ paginate }) {
  if (!API_KEY) { return Object.freeze([]); };
  let allArticles: {[tag: string]: ExtendedArticle[]} = {"all": []};
  let tags: string[] = [];
  // 取得して整理する。
  for await (let articles of getAllArticles(
    "blog", {limit: 183, fields: ["id", "title", "tags"]}
  ))
    for (var article of articles.map
        (article => article as ExtendedArticle)) {
      article.ctx = {tags: tags};
      allArticles["all"].push(article);
      for (let tag of article.tags) {
        if (!(tag in allArticles)) allArticles[tag] = [];
        if (tag == "all") console.warn(`IDが${article.id}の記事が予約済みのタグを使っています。`);
        allArticles[tag].push(article);
      };
    };
  tags.push(...Object.keys(allArticles));
  return Object.keys(allArticles).map(tag => paginate(
    allArticles[tag], { params: { tag: tag }, pageSize: PAGE_SIZE}
  ));
};


var { tag } = Astro.params;
if (tag == "all") tag = "";
const hashedTag = tag ? `#${tag}` : "";
const spacedHashedTag = tag ? ` ${hashedTag}` : "";
const page: Page<ExtendedArticle> = Astro.props.page;
const headding = `tasurenのブログ${spacedHashedTag}`;
---
<Layout
    title={`tasurenのブログ${spacedHashedTag}`}
    description={
      tag ? `${tag}のタグが付いている記事の一覧ページです。`
        : "tasurenの書いたブログの一覧があります。"
    }>
  <h1>{headding}</h1>
  {tag ? null : <>
    <details>
      <summary>使われているタグ</summary>
      {page.data.length ? page.data[0].ctx.tags.map(
        tag => <><a href={`/blog/${tag}/1`}>#{tag}</a> </>
      ) : "まだありません。"}
    </details>
  </>}
  <ul>
    {page.data.map(article => <li>
      <a href={`/blog/${article.id}`}>{article.title}</a>
    </li>)}
  </ul>
  {page.url.prev ? <a href={page.url.prev}>左</a> : null}
  {page.url.next ? <a href={page.url.next}>右</a> : null}
</Layout>