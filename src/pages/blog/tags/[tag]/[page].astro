---
import { type Page } from "astro";

import { formatDistanceToNow } from "date-fns";

import Layout from "@root/Layout.astro";

import HashTags from "@components/Page/HashTags.astro";

import { type ArticleForEnum, getEnum } from "@libraries/blog";
import { toSnakeCase } from "@libraries/utils";


export const PAGE_SIZE = import.meta.env.PAGE_SIZE || 30;
export async function getStaticPaths({ paginate }) {
  let allArticles = await getEnum();
  return Object.keys(allArticles).flatMap(tag => paginate(allArticles[tag], {
    params: { tag: toSnakeCase(tag) }, props: { tag: tag }, pageSize: PAGE_SIZE
  }));
};


var { tag } = Astro.props;
if (tag == "all") tag = "";
const hashedTag = tag ? `#${tag}` : "";
const prop = Astro.props.page as Page<ArticleForEnum>;


const firstPage = prop.currentPage == 1 ? null : "1";
const lastPage = prop.currentPage == prop.lastPage
  ? null : String(prop.lastPage);
---
<script>
  /* 数字入力によるページ切り替え。 */
  document.getElementById("jump").addEventListener("click", e => {
    let raw = prompt("ジャンプ先をどうぞ。");
    if (!raw) return;

    let page = parseInt(raw);
    let max = (e.target as HTMLElement).getAttribute("data-max-page");

    if (isNaN(page) || page > parseInt(max) || page == 0)
      alert(`そのページは範囲外です。0から${max}ページまでが有効です。`)
    else window.location.assign(`./${page}`);
  });
</script>

<Layout
    title={`Blog ${hashedTag}`}
    description={tag ? `${tag}のタグが付いている記事の一覧ページです。`
      : "tasurenの書いたブログの一覧があります。"}>
  <h1>Blog {hashedTag}</h1>
  <p>ここには、tasurenが色々まとめた記事があります。</p>

  <details style="cursor: pointer;">
    <summary>タグ一覧</summary>
    {prop.data.length ? <HashTags tags={
      prop.data[0].ctx.allTags.filter(tag => tag != "all")
    } /> : "まだありません。"}
  </details>

  <p />

  <!-- 列挙 -->
  <h2>
    一覧{prop.currentPage == 1 ? "" : `（${prop.currentPage}ページ目）`}
  </h2>
  <ul>
    {prop.data.map(article => <li>
      <a href={`/blog/${article.id}`}>{article.title}</a>
      <time datetime={article.publishedAt} class="neutral">
        &ensp;{formatDistanceToNow(new Date(article.publishedAt))}前
      </time>
    </li>)}
  </ul>

  <!-- ページ切り替え  -->
  <div class="no-visited-color" style="display: flex; justify-content: space-around;">
    <a rel={firstPage ? "prefetch" : null} href={firstPage}>1</a>
    <a rel={prop.url.next ? "prefetch" : null} href={prop.url.prev}>-</a>
    <button id="jump" data-max-page={prop.lastPage}>jump</button>
    <a rel={prop.url.next ? "prefetch" : null} href={prop.url.next}>+</a>
    <a rel={lastPage ? "prefetch" : null} href={lastPage}>{prop.lastPage}</a>
  </div>
</Layout>