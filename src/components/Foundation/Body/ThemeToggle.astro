---
import FloatButton from "@components/FloatButton.astro";
---
<style is:global>
  #theme-toggle {
    font-size: 20px;
    /* 一調整 */
    right: 10%; bottom: 10%;
    /* デフォルトのテーマの無効化。 */
    background: none;
    border: none;
    outline: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
</style>
<script>
  // 実験ができるようにウィンドウを拡張。
  interface MyWindow extends Window {
      resetTheme(): void;
  };
  declare var window: MyWindow;


  // 色々準備。
  type Theme = "dark" | "light";
  type Setting = Theme | "auto";
  const EMOJIS: {[theme: string]: string} = {
    auto: "🌓", dark: "🌙", light: "☀️"
  };


  // highlight.jsのスタイルデータの取り扱いのためのAPI。
  let styleLinks = null;
  const updateHighlightStyle = (theme: Theme) => {
    if (styleLinks == null) {
      let element = document.getElementById("highlight-style-links");
      if (element) styleLinks = JSON.parse(element.innerText);
      else styleLinks = {};
    };
    if (theme in styleLinks) {
      var link = document.getElementById("highlight-style") as HTMLLinkElement | null;
      if (!link) {
        link = document.createElement("link");
        link.rel = "stylesheet";
        link.id = "highlight-style";
        document.head.append(link);
      };
      link.href = styleLinks[theme];
      link.setAttribute("data-theme", theme);
    };
  };


  // 設定変更用のAPI。
  const get = (): Setting => localStorage.getItem("theme") as Setting || "auto";
  const set = (theme: Setting) => localStorage.setItem("theme", theme);
  const reset = () => localStorage.removeItem("theme");
  window.resetTheme = reset;

  let toggleButton = document.getElementById("theme-toggle");
  const updateEmoji = (setting: Setting) =>
    toggleButton.innerText = EMOJIS[setting];
  const effect = (
    theme: Theme, setting?: Setting,
    enableUpdateHighlightStyle: boolean = true
  ) => {
    document.documentElement.setAttribute("data-theme", theme);
    if (setting) updateEmoji(setting);
    if (enableUpdateHighlightStyle) updateHighlightStyle(theme);
  };
  const detectTheme = (setting: Setting): Theme => {
    if (setting == "auto")
      return window.matchMedia
        ('(prefers-color-scheme: dark)')
          .matches ? "dark" : "light";
    else return setting;
  };


  // 前の設定を引き継ぐ。
  let initialTimeSetting = get();
  // 初期化する。
  let initialTimeTheme = detectTheme(initialTimeSetting);
  if (initialTimeTheme == "light")
    effect("light", initialTimeSetting, false);
  else if (initialTimeSetting == "auto")
    updateEmoji(initialTimeSetting);
  updateHighlightStyle(initialTimeTheme);


  // テーマ切り替えボタンを用意する。
  toggleButton.addEventListener("click", () => {
    // 設定を読み込み、次のテーマを調べる。
    var setting = get();
    if (setting == "auto") setting = "dark";
    else if (setting == "dark") setting = "light";
    else setting = "auto";
    // テーマの設定を更新する。
    set(setting);
    // テーマを適用する。
    effect(detectTheme(setting), setting);
  });
</script>
<FloatButton id="theme-toggle" text="🌙" />